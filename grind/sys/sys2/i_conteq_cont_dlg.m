function i_conteq_cont_dlg(obj,origin)
global g_grind g_cont;
if nargin==0
    variabs=evalin('base','whos');
    ndx=strcmp({variabs.class},'grind_matcont');
    if sum(ndx)==1
        obj=evalin('base',variabs(ndx).name);
    else
        ndx=strcmp({variabs.class},'grind_coco');
        if sum(ndx)==1
            obj=evalin('base',variabs(ndx).name);
        else
            obj=[];
        end
    end
end
oldpar3='';
if isempty(obj)
    if strncmp(g_grind.cont.engine, 'matcont',7)
        obj=grind_matcont;
        g_grind.cont.matcont=obj;
    elseif strcmp(g_grind.cont.engine, 'coco')
        obj=grind_coco;
        g_grind.cont.coco=obj;
    end
end
if numel(obj.points)<=1
    obj.add_points(findeqs('maxtime',5));
end

ud = obj.settings;
hfig=findobj(0,'tag','i_conteq_cont_dlg');
if isempty(hfig)||~ishandle(hfig)
    hfig=createdlg;
else
    figure(hfig)
end
if nargin<2
    origin='';
end
if strcmp(origin,'contbif')
    codim=2;
else
    codim=numel(obj.settings.derived.freepars);
    if codim<1
        codim=1;
    end
end

h=findobj(hfig,'tag','enginepopup');
if strcmp(obj.settings.derived.engine,'coco')
    set(h,'Value',1);
elseif strncmp(obj.settings.derived.engine,'matcont',7)
    set(h,'Value',2);
end

set(hfig, 'Name',sprintf('Bifurcation analysis [%s]',obj.settings.derived.engine));
h=findobj(hfig,'Tag','codimpopup');
if codim==3||any(obj.getndx('points','npars',3))
    set(h,'string',{'1 parameter','2 parameters','3 parameters'});
end
set(h,'Value',codim);
cur_point=1;
cur_curve=1;
if isfield(obj.settings.derived,'frompoint')&&~isempty(obj.settings.derived.frompoint)
    cur_point1=find(obj.getndx('points','id',obj.settings.derived.frompoint));
    if ~isempty(cur_point1)
        cur_point=cur_point1;
        ctypes=obj.pointprops(obj.points(cur_point).propndx).ctypes;
        ndx=obj.getndx('curveprops','ctype',ctypes);
        ndx1=[obj.curveprops(ndx).npars]==codim;
        ctypes={obj.curveprops(ndx).ctype};
        ctypes=ctypes(ndx1);
        cur_curve=find(strcmp(ctypes,obj.settings.derived.ctype));
        if isempty(cur_curve)
            cur_curve=1;
        end
    else
        obj.settings.derived.frompoint='';
        obj.settings.derived.ctype='';
    end
end
symtext={  'Numeric derivatives','Symbolic derivatives' };
symbolicTB= has_mupad;
if ~symbolicTB&&(~isempty(g_grind.syms.Jacobian)||~isempty(g_grind.syms.Jacobianp)||~isempty(g_grind.syms.Hessian))
    symbolicTB=true;
end
if ~symbolicTB
    %    enab = 'on';
    symtext={ 'Numeric derivatives','Enter symbolic derivatives'};
else
    %      enab = 'on';
    if isempty(g_grind.syms.Jacobian)&&isempty(g_grind.syms.Jacobianp)&&isempty(g_grind.syms.Hessian)
        symtext={  'Numeric derivatives','Generate symbolic derivatives' };
    end
end
h=findobj(hfig,'Tag','symscheck');
set(h,'String',symtext);
if obj.settings.grind.symbolic
    set(h,'Value',2);
else
    set(h,'Value',1);
end
h=findobj(hfig, 'Tag','PopupEqlist');
set(h,'Value',cur_point);

h=findobj(hfig,  'Tag','curvepopup');
set(h, 'String',repmat({'None'},[cur_curve,1]),'Value',cur_curve);

if isempty(obj.settings.derived.freepars)
    obj.settings.derived.freepars(1)=1;
end
h=findobj(hfig, 'Tag','PopupPars');
pars=obj.settings.derived.allpars(obj.settings.grind.activepars);

set(h,'string',pars);
%pars=get(h,'string');
set(h,'Value',all2active(obj.settings.derived.freepars(1)));
par1changed(h);
if isnan(obj.settings.grind.parranges1(1))
    s='';
else
    s=sprintf('%g',obj.settings.grind.parranges1(1));
end
h=findobj(hfig,'Tag','EditMinimum');
set(h,'String',s);

if isnan(obj.settings.grind.parranges1(2))
    s='';
else
    s=sprintf('%g',obj.settings.grind.parranges1(2));
end
h=findobj(hfig,'Tag','EditMaximum');
set(h,'String',s);

% if length(obj.settings.derived.freepars)==1
%     val2=1;
% else
%     val2=all2active(obj.settings.derived.freepars(2));
% end
h=findobj(hfig, 'Tag','PopupPar2');
set(h,'string',pars);
par2=obj.get('par2');
if ~isempty(par2)
    set(h,'Value',find(strcmp(pars,par2)));
end

if isnan(obj.settings.grind.parranges2(1))
    s='';
else
    s=sprintf('%g',obj.settings.grind.parranges2(1));
end
h=findobj(hfig,'Tag','EditMinimum2');
set(h,'String',s);

if isempty(obj.settings.grind.parranges2)||isnan(obj.settings.grind.parranges2(2))
    s='';
else
    s=sprintf('%g',obj.settings.grind.parranges2(2));
end
h=findobj(hfig,'Tag','EditMaximum2');
set(h,'String',s);

if numel(obj.settings.grind.stateranges)==2
    if isnan(obj.settings.grind.stateranges(1))&&isnan(obj.settings.grind.stateranges(2))
        aval=1;
    elseif obj.settings.grind.stateranges(1)==0&&isnan(obj.settings.grind.stateranges(2))
        aval=2;
    else
        aval=3;
    end
else
    aval=3;
end
h=findobj(hfig,'Tag','PopupvarRange');
set(h,'Value',aval)


setcodim(hfig);
optionscheck(hfig);

    function  hfig=createdlg
        
        hfig= figure(...
            'PaperUnits','points',...
            'Position',[381 150 607 448],...
            'Color',[0.914 0.914 0.914],...
            'MenuBar','none',...
            'ToolBar','none',...
            'Name',sprintf('Bifurcation analysis [%s]',obj.settings.derived.engine),...
            'NumberTitle','off',...
            'CreateFcn', @(h,evnt)movegui(h,'center') ,...
            'Tag','i_conteq_cont_dlg',...
            'UserData',ud,...
            'ResizeFcn',@resize,...
            'PaperPosition',[18 180 576 532],...
            'PaperSize',[595.275552 841.889736]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'String',{  '1 parameter'; '2 parameters'},...
            'Style','popupmenu',...
            'Value',1,...
            'Position',[129 313.5 90 18],...
            'TooltipString','How many parameters should be continued (=codimension)',...
            'BackgroundColor',[1 1 1],...
            'Callback',@setcodim,...
            'Children',[],...
            'Tag','codimpopup',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        if g_grind.solver.isdiffer
            h1='m';
        else
            h1='';
        end
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'String',{  'coco engine'; sprintf('matcont%s engine',h1) },...
            'Style','popupmenu',...
            'Value',1,...
            'TooltipString','Select software package to use (two independent analyses possible)',...
            'Position',[129+105.5 313.5 90 18],...
            'BackgroundColor',[1 1 1],...
            'Callback',@setengine,...
            'Children',[],...
            'Tag','enginepopup',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Continuation:',...
            'Style','text',...
            'Position',[8.25 315 103.5 13.5],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','HeadText',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Initial point:',...
            'Style','text',...
            'Position',[8.25 291 97.5 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','PopupEqText',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Callback',@selectedpoint,...
            'String',{  'None', 'none'},...
            'Style','popupmenu',...
            'Value',1,...
            'TooltipString','Select the initial point for continuation',...
            'Position',[129 291 197.25 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'Tag','PopupEqlist',...
            'Userdata',struct('filter',[]),...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','...',...
            'Position',[334.5 292.5 18.75 18],...
            'Callback',@initialpointdlg,...
            'Children',[],...
            'TooltipString','Edit/View initial points',...
            'Tag','initialpointdlg_btn',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Target curve:',...
            'Style','text',...
            'Position',[8.25 267 97.5 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','curvetext',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'callback',@optionscheck,...
            'String',{''},...
            'Style','popupmenu',...
            'Value',1,...
            'Position',[129 267.75 197.25 18],...
            'BackgroundColor',[1 1 1],...
            'TooltipString','Select kind of curve to create',...
            'Children',[],...
            'Tag','curvepopup',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','...',...
            'Position',[334.5 267.75 18.75 18],...
            'Callback',@managecurvesclick,...
            'Children',[],...
            'TooltipString','Manage calculated curves',...
            'CreateFcn',[],...
            'Tag','manageCurves_btn',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Parameter(s):',...
            'Style','text',...
            'Position',[8.25 243 93.75 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','parsText',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String',obj.settings.derived.allpars(obj.settings.grind.activepars),...
            'Style','popupmenu',...
            'Callback',@par1changed,...
            'Value',1,...
            'Position',[129 244.5 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'TooltipString','Name of first parameter',...
            'Tag','PopupPars',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Callback',@setminmax,...
            'String','',...
            'Style','edit',...
            'Position',[129 221.25 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'TooltipString','Minimum for first parameter (leave empty for no contraints)',...
            'Tag','EditMinimum',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'Callback',@setminmax,...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','',...
            'Style','edit',...
            'Position',[129 198 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'TooltipString','Maximum for first parameter (leave empty for no contraints)',...
            'Tag','EditMaximum',...
            'FontSize',10.6666666666667);
        
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Minimum or empty',...
            'Style','text',...
            'Position',[8.25 219 75 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','MinText',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Maximum or empty',...
            'Style','text',...
            'Position',[8.25 195 90.75 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','MaxText',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'Callback',@setvarious,...
            'String',obj.settings.derived.allpars(obj.settings.grind.activepars),...
            'Style','popupmenu',...
            'Value',1,...
            'Position',[235.5 243 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'Visible','off',...
            'Tag','PopupPar2',...
            'TooltipString','Name of second parameter:',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Callback',@setminmax,...
            'Style','edit',...
            'Position',[235.5 220.5 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'Visible','off',...
            'Tag','EditMinimum2',...
            'String','',...
            'TooltipString','Minimum for second parameter (leave empty for no contraints)',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'Callback',@setminmax,...
            'ListboxTop',0,...
            'Style','edit',...
            'Position',[235.5 198 90 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'String','',...
            'Visible','off',...
            'TooltipString','Maximum for second parameter (leave empty for no contraints)',...
            'Tag','EditMaximum2',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'String','Range for state variables',...
            'Style','text',...
            'Position',[8.25 171 93.75 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','RangeStateText',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'TooltipString','Show results only if state variables are within a certain range (leave empty for no contraints)',...
            'String',{  'No restriction'; 'Only positive values'; 'Other ranges' },...
            'Style','popupmenu',...
            'Value',1,...
            'Position',[129 174 197.25 18],...
            'BackgroundColor',[1 1 1],...
            'Callback',@varrangechanged,...
            'Children',[],...
            'Tag','PopupvarRange',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'HorizontalAlignment','left',...
            'String','Jacobian/Hessian matrices',...
            'Style','text',...
            'Position',[8.25 147 124.5 18],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','symstext',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'String',{' ',' '},...
            'Style','popupmenu',...
            'Callback',@setvarious,...
            'Value',2,...
            'Position',[129 150.75 197.25 18],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'TooltipString','For most scalar models analytic Jacobians can be generated if syms toobox is installed',...
            'Tag','symscheck',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','...',...
            'Position',[334.5 152.25 18.75 18],...
            'Callback',@(h,ev)enterjac,...
            'Children',[],...
            'TooltipString','View/enter the analytic Jacobian matrices',...
            'Tag','enterjacbutton',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits',get(0,'defaultuicontrolFontUnits'),...
            'Units','characters',...
            'String',' All opions / only key options',...
            'Style','checkbox',...
            'TooltipString','Toggles whether all settings are visible or a few key options',...
            'Position',[2.8 12.2307692307692 47 2.15384615384616],...
            'BackgroundColor',[0.914 0.914 0.914],...
            'Children',[],...
            'Tag','OptionsCheck',...
            'Callback',@optionscheck);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','...',...
            'Position',[334.5 122.25 18.75 18],...
            'Callback',@editpropdlg,...
            'Children',[],...
            'TooltipString','Edit options',...
            'Tag','editpropbutton',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        c = uicontextmenu;
        uimenu(c,'tag','TableMenu','Label','Edit Option','Callback',[]);
        
        h=uitable(...
            'Parent',hfig,...
            'FontUnits',get(0,'defaultuitableFontUnits'),...
            'Units','characters',...
            'BackgroundColor',[1 1 1;0.96078431372549 0.96078431372549 0.96078431372549],...
            'ColumnName',{  'Option'; 'Description'; 'Value' },...
            'ColumnWidth',{  70 230 90 },...
            'RowName',[],...
            'Position',[2.6 0.538461538461539 83.6 11.6923076923077],...
            'ColumnEditable',[false false true],...
            'ColumnFormat',{  [] [] [] },...
            'Data',[],...
            'RearrangeableColumns','on',...
            'RowStriping',get(0,'defaultuitableRowStriping'),...
            'CellEditCallback',@editoptcell,...
            'CellSelectionCallback',@selectoptcell,...
            'TooltipString','Edit/view the available settings (dependent on software package)',...
            'Visible','on',...
            'ButtonDownFcn',blanks(0),...
            'CreateFcn',[],...
            'DeleteFcn',blanks(0),...
            'UIContextMenu',c,...
            'Tag','settingsTable',...
            'UserData',struct('Indices',[1,1]),...
            'KeyPressFcn',blanks(0));
        
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Plot all',...
            'Position',[371.25 145.5 71.25 18],...
            'Callback',@newplot,...
            'Enable',iif(isempty(obj.curves),'off','on'),...
            'CreateFcn',[],...
            'TooltipString','Plot all generated curves',...
            'Tag','Plot_btn',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Session',...
            'Position',[371.25 117.75 71.25 18],...
            'Callback',@doreset,...
            'CreateFcn',[],...
            'TooltipString','Save/Open/Clear session and other actions',...
            'Tag','Reset_btn',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Expand',...
            'Position',[371.25 90 71.25 18],...
            'Callback',@expandbtn,...
            'Enable',iif(isempty(obj.curves),'off','on'),...
            'CreateFcn',[],...
            'TooltipString','Expand the continuation of the current curve',...
            'Tag','expand_btn',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','...',...
            'Position',[334.5 243 18.75 18],...
            'Callback',@activeparsdlg,...
            'Children',[],...
            'TooltipString','Select active and free parameters',...
            'CreateFcn',[],...
            'Tag','activepars_btn',...
            'FontSize',10.6666666666667);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Help',...
            'TooltipString','Open Help system for conteq',...
            'Position',[371.25 62.25 71.25 18],...
            'Callback',@(hObj,eventdata)commands('conteq'),...
            'Children',[],...
            'Tag','Helpbutton',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Close',...
            'Position',[371.25 34.5 71.25 18],...
            'Callback',@doclose,...
            'Children',[],...
            'TooltipString','Close the dialog box',...
            'Tag','Closebutton',...
            'FontSize',10.6666666666667,...
            'CreateFcn',[]);
        
        uicontrol(...
            'Parent',hfig,...
            'FontUnits','pixels',...
            'Units','points',...
            'ListboxTop',0,...
            'String','Calculate',...
            'Position',[371.25 5.25 71.25 18],...
            'Callback',@calculatebtn,...
            'Children',[],...
            'CreateFcn',[],...
            'TooltipString','Continue the selected point with the current settingds',...
            'Tag','Calculatebutton',...
            'FontSize',10.6666666666667);
        drawnow;
    end
    function doclose(hObj,~)
        hfig=get(hObj,'parent');
        if obj.settings.derived.ischanged
            [~,nam]=fileparts(obj.settings.derived.inifile);
            nam=regexprep(nam,'[^0-9a-zA-Z_]','_');
            if nam(end)=='_'
                nam=nam(1:end-1);
            end
            newname=sprintf('conteq_session_%s_%%d.m',nam);
            ifile=1;
            while exist(sprintf(newname,ifile),'file')
                ifile=ifile+1;
            end
            [filename, pathname] = uiputfile('*.m;*.mat;*.*', 'Save CONTEQ session as',sprintf(newname,ifile));
            if ischar(filename)
                obj.saveas(fullfile(pathname,filename));
            end
        end
        close(hfig)
    end
    function doreset(hObj,~)
        hfig=get(hObj,'parent');
        %  data1=  {false ,'Reset all options';false,'Clear curves';false,'Load session from file';false, 'Save Session to file'};
        
        result1=session_dlg;
        if result1{5,1}
            obj.findupdate(true);
        end
        if result1{1,1}
            obj.clear('Settings')
            optionscheck(hfig);
            setcodim(hfig);
        end
        if result1{2,1}
            obj.clear('Curves')
            obj.add_points(findeqs('maxtime',10));
            codim=1;
            optionscheck(hfig);
            setcodim(hfig);
        end
        if result1{4,1}
            obj.saveas;
        end
        if result1{3,1}
            obj=obj.load_session;
            g_cont=obj;
            g_grind.cont.engine=obj.settings.derived.engine;
            g_grind.cont.(obj.settings.derived.engine)=obj;
            i_conteq_cont_dlg(obj)
            newplot(hObj);
        end
        
    end
    function setminmax(hObj,~)
        hfig=get(hObj,'parent');
        h=findobj(hfig,'tag','codimpopup');
        codim=get(h,'value');
        parrange1= [NaN NaN];
        h=findobj(hfig,'tag','EditMinimum');
        parrange1(1)=str2double(get(h,'string'));
        h=findobj(hfig,'tag','EditMaximum');
        parrange1(2)=str2double(get(h,'string'));
        if ~any(isnan(parrange1))&&parrange1(2)<parrange1(1)
            parrange1=sort(parrange1);
        end
        obj.set('parranges1', parrange1);
        if codim==2
            parrange2= [NaN NaN];
            h=findobj(hfig,'tag','EditMinimum2');
            parrange2(1)=str2double(get(h,'string'));
            h=findobj(hfig,'tag','EditMaximum2');
            parrange2(2)=str2double(get(h,'string'));
            if ~any(isnan(parrange2))&&parrange2(2)<parrange2(1)
                parrange2=sort(parrange2);
            end
            obj.set('parranges2', parrange2);
        end
    end
    function managecurvesclick(~,~)
        i_curve_cont_dlg(obj);
    end
    function expandbtn(hObj,~)
        hfig=get(hObj,'parent');
        h=findobj(hfig,'tag','PopupEqlist');
        ud1=get(h,'userdata');
        if obj.update_points
            str=obj.show(codim,ud1.filter);
            set(h,'string',str);
        end
        str=get(h,'string');
        v=get(h,'value');
        id=regexp(str{v},'([A-Za-z+0-9]*_)|([A-Za-z0-9+]*)','match','once');
        h=findobj(hfig,'tag','curvepopup');
        str=get(h,'string');
        v=get(h,'value');
        ctype=regexp(str{v},'([A-Za-z+]*)','match','once');
        set(hfig,'visible','off');
        drawnow;
        obj.cont(id,ctype,'expand');
        doplot(codim);
        set(hfig,'visible','on');
    end

    function editpropdlg(hObj,~)
        hfig=get(hObj,'parent');
        h1=findobj(hfig,'Tag','settingsTable');
        ud=get(h1,'Userdata');
        if isempty(ud.Indices)
            ud.Indices=[1 1];
        end
        data=get(h1,'data');
        if ud.Indices(1)>size(data,1)
            ud.Indices(1)=1;
        end
        [changes,lastprop]=i_conteq_propdlg(obj,data{ud.Indices(1),1});
        f=find(strcmp(data(:,1),lastprop));
        if ~isempty(f)
            ud.Indices(1)=f;
            set(h1,'Userdata',ud);
        end
        if ~isempty(changes)
            updateopts(hfig,changes)
            setoptions(hfig);
        end
    end

    function updateopts(hfig,changes)
        if isempty(changes)||any(strcmp(changes,'par1'))
            h1=findobj(hfig,'tag', 'PopupPars');
            pars=get(h1,'string');
            v=find(strcmp(pars,obj.get('par1')));
            set(h1,'value',v(1));
            par1changed(hfig)
        end
        if isempty(changes)||any(strcmp(changes,'par2'))
            h1=findobj(hfig,'tag', 'PopupPar2');
            pars=get(h1,'string');
            v=find(strcmp(pars,obj.get('par2')));
            set(h1,'value',v(1));
            setvarious(hfig)
        end
        if isempty(changes)||any(strcmp(changes,'parranges1'))
            ran=obj.get('parranges1');
            h1=findobj(hfig,'tag', 'EditMinimum');
            set(h1,'string',sprintf('%g',ran(1)));
            h1=findobj(hfig,'tag', 'EditMaximum');
            set(h1,'string',sprintf('%g',ran(2)));
            setminmax(hfig)
        end
        if isempty(changes)||any(strcmp(changes,'parranges2'))
            ran=obj.get('parranges2');
            h1=findobj(hfig,'tag', 'EditMinimum2');
            set(h1,'string',sprintf('%g',ran(1)));
            h1=findobj(hfig,'tag', 'EditMaximum2');
            set(h1,'string',sprintf('%g',ran(2)));
            setminmax(hfig)
        end
        if isempty(changes)||any(strcmp(changes,'symbolic'))
            h1=findobj(hfig,'tag', 'symscheck');
            v=obj.get('symbolic')+1;
            set(h1,'value',v);
        end
        if isempty(changes)||any(strcmp(changes,'stateranges'))
            ran=g_cont.get('stateranges');
            if numel(ran)==2
                if all(isnan(ran))
                    val1=1;
                elseif ran(1)==0&&isnan(ran(2))
                    val1=2;
                else
                    val1=3;
                end
            else
                val1=3;
            end
            h1=findobj(hfig,'Tag','PopupvarRange');
            set(h1,'Value',val1)
        end
    end

    function setengine(~,~)
        h=findobj(hfig,'tag','PopupEqlist');
        str=get(h,'string');
        v=get(h,'value');
        obj.settings.derived.frompoint=regexp(str{v},'[A-Za-z0-9_+]*','match','once');
        h=findobj(hfig,'tag','curvepopup');
        str=get(h,'string');
        v=get(h,'value');
        obj.settings.derived.ctype=regexp(str{v},'[A-Za-z0-9_+]*','match','once');
        hObj=findobj(hfig,'tag','enginepopup');
        hfig=get(hObj,'parent');
        aval=get(hObj,'value');
        if aval==1
            if ~isfield(g_grind.cont,'coco')
                g_grind.cont.coco=grind_coco;
                g_grind.cont.coco.add_points(findeqs('maxtime',5));
            end
            obj=g_grind.cont.coco;
            g_grind.cont.engine='coco';
            g_cont=obj;
        else
            if ~isfield(g_grind.cont,'matcont')
                g_grind.cont.matcont=grind_matcont;
                g_grind.cont.matcont.add_points(findeqs('maxtime',5));
            end
            obj=g_grind.cont.matcont;
            if g_grind.solver.isdiffer
                g_grind.cont.engine='matcontm';
            else
                g_grind.cont.engine='matcont';
            end
            g_cont=obj;
        end
        i_conteq_cont_dlg(obj,codim)
    end
    function [id,ctype]=getcurveid(hfig)
        h=findobj(hfig,'tag','PopupEqlist');
        ud1=get(h,'userdata');
        if obj.update_points
            str=obj.show(codim,ud1.filter);
            set(h,'string',str);
        end
        str=get(h,'string');
        v=get(h,'value');
        id=regexp(str{v},'[A-Za-z0-9_+]*','match','once');
        h=findobj(hfig,'tag','curvepopup');
        str=get(h,'string');
        v=get(h,'value');
        ctype=regexp(str{v},'[A-Za-z0-9_+]*','match','once');
    end
    function calculatebtn(hObj,~)
        hfig=get(hObj,'parent');
        [id,ctype]=getcurveid(hfig);
        set(hfig,'visible','off');
        drawnow;
        obj.cont(id,ctype);
        doplot(codim);
        setcodim(hfig);
        %  update_enable(hfig);
        set(hfig,'visible','on');
    end
    function par1changed(hObj,~)
        setvarious(hObj);
        hfig=get(hObj,'parent');
        h1=findobj(hfig,'tag', 'PopupPars');
        v=get(h1,'value');
        pars=get(h1,'string');
        if ~isempty(v)&&v<=length(pars)&&v>0
            par1=pars{v};
        else
            par1='';
        end
        h2=findobj(hfig,'tag', 'PopupPar2');
        v2=get(h2,'value');
        str=get(h2,'string');
        %     str=obj.settings.derived.allpars(obj.settings.grind.activepars);
        %     this line may cause par2 to change, was there some problem with
        %     get(h2,'string')?
        par2=g_cont.get('par2');
        if isempty(par2)&&~isempty(v2)&&v2<=length(str)&&v2>0
            par2=str{v2};
        elseif ~isempty(par2)
            par2='';
        end
        if ~isempty(par2)
            ndx=~strcmp(pars,par1);
            pars2=pars(ndx);
            if ~isempty(pars2)
                if isempty(v2)||v2<=0
                    v2=1;
                    par2=pars2{v2};
                end
                if v2>length(pars2)
                    v2=length(pars2);
                    par2=pars2{v2};
                end
                if strcmp(par1,par2)
                    par2=pars2{v2};
                end
                set(h2,'string',pars2);
                v2=find(strcmp(pars2,par2));
                if ~isempty(v2)
                    set(h2,'value',v2);
                end
            end
        end
        update_enable(hfig);
    end
    function setvarious(hObj,~)
        hfig=get(hObj,'parent');
        h=findobj(hfig,'tag','codimpopup');
        codim=get(h,'value');
        h=findobj(hfig,'tag','PopupPars');
        str=get(h,'string');
        v=get(h,'value');
        if ~isempty(v)&&v<=length(str)&&v>0
            par1=str{v};
        else
            par1='';
        end
        h=findobj(hfig,'tag', 'PopupPar2');
        if strcmp(get(h,'Visible'),'on')
            str=get(h,'string');
            v=get(h,'value');
            par2=str{v};
        else
            par2=obj.get('par2');
        end
        if codim==3
            par3=obj.get('par3');
            if isempty(par3)
                if ~isempty(oldpar3)
                    par3=oldpar3;
                else
                    f1=find(~ismember(obj.settings.derived.allpars,{par1,par2}));
                    if ~isempty(f1)
                        par3=obj.settings.derived.allpars{f1(1)};
                    end
                end
                obj.set('par3',par3)
                setoptions(hfig);
            end
            oldpar3=par3;
        else
            par3=oldpar3;
        end
        set(obj,'par3',par3,'par2',par2,'par1',par1);
        h1=findobj(hfig,'tag','symscheck');
        aval=get(h1,'value');
        s=get(h1,'string');
        if strcontains(lower(s{aval}),'enter')&&~g_grind.statevars.vector
            enterjac
            uiwait(findobj(0,'tag','i_enterjacdlg'))
            if isempty(g_grind.syms.Jacobian)&&isempty(g_grind.syms.Jacobianp)&&isempty(g_grind.syms.Hessian)
                aval=1;
            end
        end
        oldsym=obj.get('symbolic');
        if (~oldsym && aval==2) || (oldsym &&aval==1)
            obj.set('symbolic',aval==2);
            h1=findobj(hfig,'Tag','settingsTable');
            data=get(h1,'data');
            ndx=find(strcmp(data(:,1),'symbolic'));
            if length(ndx)==1
                if aval==2
                    data{ndx,3}='true';
                else
                    data{ndx,3}='false';
                end
                set(h1,'data',data);
            end
        end
        update_enable(hfig);
    end
    function selectedpoint(hObj,~)
        hfig=get(hObj,'parent');
        h=findobj(hfig,'tag','codimpopup');
        codim=get(h,'value');
        h=findobj(hfig,'tag','PopupEqlist');
        ud1=get(h,'userdata');
        if obj.update_points
            str=obj.show(codim,ud1.filter);
            set(h,'string',str);
        end
        str=get(h,'string');
        if isempty(str)
            str={'None available'};
        end
        v=get(h,'value');
        ndx=obj.getndx('points','id',regexp(str{v},'[A-Z0-9_+]*','match','once'));
        pnt=obj.points(ndx);
        obj.settings.derived.frompoint=pnt.id;
        if ~isempty(pnt)
            ctypes=obj.pointprops(pnt(1).propndx).ctypes;
        else
            ctypes={};
        end
        ndx=obj.getndx('curveprops','ctype',ctypes);
        ndx1=[obj.curveprops(ndx).npars]==codim;
        curves={obj.curveprops(ndx).descr};
        curves=curves(ndx1);
        if isempty(curves)
            curves={'None available'};
        else
            obj.settings.derived.ctype=regexp(curves{1},'[A-Za-z0-9_+]*','match','once');
        end
        h=findobj(hfig,'tag','curvepopup');
        v=get(h,'value');
        set(h,'string',curves);
        if v>length(curves)
            set(h,'value',length(curves));
        end
        if length(curves)==1
            set(h,'Enable', 'off');
        else
            set(h,'Enable', 'on');
        end
        setoptions(hfig);
    end
    function doplot(codim)
        ndx2= obj.getndx('curves','npars',codim);
        freepars=unique(vertcat(g_cont.curves(ndx2).freepars), 'rows');
        if codim==1&&~isempty(origin)
            for j=1:length(freepars)
                if ~isfield(g_grind, 'paranal')||~isfield(g_grind.paranal, 'dlg')
                    paranal('-defaults');
                    g_grind.paranal.dlg = i_paranaldialog('initstruct', 1);
                end
                if isempty(g_grind.paranal.dlg.par{1})
                    g_grind.paranal.dlg.par{1} = obj.settings.derived.allpars{freepars(j)};
                    pars= {obj.settings.derived.parranges(:).par};
                    ndx= strcmp(g_grind.paranal.dlg.par{1},pars);
                    if any(ndx)
                        g_grind.paranal.dlg.nend(1) = obj.settings.derived.parranges(ndx).range(1);
                        g_grind.paranal.dlg.start(1) = obj.settings.derived.parranges(ndx).range(2);
                    end
                end
                for i = 1:length(g_grind.paranal.plots)
                    plt = g_grind.paranal.plots{i};
                    hfigp = i_makefig('paranal', i-1+(j-1)*length(g_grind.paranal.plots));
                    delete(findobj(hfigp,'tag','conteq'))
                    delete(findobj(hfigp,'tag','label-text'));
                    g_cont.plot('hfig',hfigp,'freepars',freepars(j),'fun',{plt.xaxis, plt.yaxis, plt.zaxis});
                    hold on;
                end
            end
        else
            for j=1:size(freepars,1)
                if codim==1
                    hfigp=i_figno('conteq');
                    if ishandle(hfigp)
                        delete(hfigp)
                    end
                    hfigp = i_makefig('conteq',j-1);
                    drawnow();
                    set(hfigp,'Name','One dimensional bifurcation plot');
                else
                    hfigp=i_figno('contbif')+j-1;
                    if ishandle(hfigp)
                        delete(hfigp)
                    end
                    hfigp = i_makefig('contbif',j-1);
                    drawnow();
                    set(hfigp,'Name','Two dimensional bifurcation plot');
                end
                %   set(hfigp, 'WindowButtonDown',@conteq_buttondown);
                %  set(h, 'KeypressFcn',@(hobj,ev)i_callb('keypressed',hobj));
                hold on;
                obj.plot('hfig',hfigp,'freepars',freepars(j,:));
            end
        end
        obj.show;
    end
    function initialpointdlg(hObj,~)
        hfig=get(hObj,'parent');
        h=findobj(hfig,'tag','codimpopup');
        codim=get(h,'value');
        h=findobj(hfig,'tag','PopupEqlist');
        ud1=get(h,'UserData');
        if obj.update_points
            str=obj.show(codim,ud1.filter);
            set(h,'string',str);
        end
        pointlist=get(h,'string');
        aval=get(h,'value');
        if isempty(pointlist)
            [pointlist,aval,afilter]=i_initialpoint_cont_dlg(obj,pointlist,1,codim,ud1.filter);
        else
            [pointlist,aval,afilter]=i_initialpoint_cont_dlg(obj,pointlist,aval,codim,ud1.filter);
        end
        %update the points in the list
        if ~isempty(pointlist)
            ud1.filter=afilter;
            set(h,'UserData',ud1)
            h=findobj(hfig,'tag','PopupEqlist');
            if isempty(afilter)
                set(h, 'TooltipString','Select the initial point for continuation');
            else
                f=fieldnames(afilter);
                if length(f)==1
                    s=sprintf('%s==%g',f{1},afilter.(f{1}));
                else
                    vals=struct2cell(afilter);
                    parvals=sprintf('%.4g,',vals{:});
                    pars=sprintf('%s,',f{:});
                    s=sprintf('[%s]==[%s]',pars(1:end-1),parvals(1:end-1));
                end
                set(h, 'TooltipString',sprintf('Select the initial point for continuation, Filter: %s',s));
            end
            
            set(h,'string',pointlist);
            set(h,'value',aval);
        end
        update_enable(hfig)
    end

    function activeparsdlg(hObj,~)
        hfig=get(hObj,'parent');
        %ud = get(hfig, 'userdata');
        % h=findobj(hfig,'tag','PopupPars');
        % ipar=get(h,'value');
        % pars=get(h,'string');
        % ud.freepars(1)=find(strcmp(pars{ipar},obj.settings.derived.allpars));
        h=findobj(hfig,'tag','codimpopup');
        codim=get(h,'value');
        selectpars(codim);
    end
    function setoptions(hfig)
        h=findobj(hfig,'Tag','OptionsCheck');
        full=get(h,'Value');
        if full
            opts=obj.get('alloptions',obj.settings.derived.frompoint,obj.settings.derived.ctype);
        else
            %             h=findobj(hfig,'tag','PopupEqlist');
            %             if obj.update_points
            %                 str=obj.show(codim);
            %                 set(h,'string',str);
            %             end
            %             str=get(h,'string');
            %             v=get(h,'value');
            %             if isempty(v)
            %                 v=1;
            %             end
            %             id=regexp(str{v},'([A-Za-z+_0-9]*)','match','once');
            %             h=findobj(hfig,'tag','curvepopup');
            %             v=get(h,'value');
            %             str=get(h,'string');
            %             ctype=regexp(str{v},'[A-Za-z+0-9]*','match','once');
            %            opts=obj.get('keyoptions',id,ctype);
            opts=obj.get('keyoptions',obj.settings.derived.frompoint,obj.settings.derived.ctype);
        end
        for i=1:size(opts,1)
            if isnumeric(opts{i,3})||islogical(opts{i,3})
                opts{i,3}=mat2str(opts{i,3});
            end
        end
        h=findobj(hfig,'tag','settingsTable');
        cols=get(h,'ColumnWidth');
        set(h,'data',opts);
        set(h,'ColumnWidth',cols);
        update_enable(hfig)
    end

    function editoptcell(hObject,ev)
        data=get(hObject,'data');
        obj.set(data{ev.Indices(1),1},data{ev.Indices(1),3});
        updateopts(getparentfig(hObject),data(ev.Indices(1),1))
    end

    function selectoptcell(hObject,ev)
        set(hObject,'userdata',struct('Indices',ev.Indices));
    end

    function optionscheck(hObject,~)
        hfig=getparentfig(hObject);
        h1=findobj(hfig,'tag','curvepopup');
        str=get(h1,'string');
        v=get(h1,'value');
        obj.settings.derived.ctype=regexp(str{v},'[A-Za-z0-9_+]*','match','once');
        setoptions(hfig);
    end

%        if isfield(g_grind, 'findeqs')
%      settings=getparsettings;
%      changed=(length(settings)~=length(ud.settings))|(sum(settings~=ud.settings)>0);
    function newplot(~,~)
        doplot(1);
        doplot(2);
    end

    function setcodim(hObject,~)
        hfig=getparentfig(hObject);
        h=findobj(hfig,'Tag','codimpopup');
        codim=get(h,'value');
        if codim==2
            if ~any(obj.getndx('points','npars',2))
                codim=1;
                set(h,'value',1);
            end
        end
        if codim==1
            vis='off';
            siz=197.25;
        else
            vis='on';
            siz=90;
        end
        h=findobj(hfig,'tag', 'PopupEqlist');
        ud1=get(h,'UserData');
        str=get(h,'string');
        aval=get(h,'value');
        if ~isempty(aval)&&aval<length(str)
            oldsel=str{aval};
        else
            oldsel='';
        end
        s1=obj.show(codim,ud1.filter);
        if isempty(s1)
            s1={'None available'};
        end
        ids=regexp(s1,'[A-Za-z0-9_+]*','match','once');
        s2=s1;
        if numel(obj.curves)>20
            curve.data.settings=obj.get('-nondefault');
            curve.freepars=obj.settings.derived.freepars;
            curve.frompoint='';
            for i=1:length(ids)
                curve.frompoint=ids{i};
                if any(getndx(obj,'curves','samecurve',curve))
                    s2{i}=['*' s1{i}];
                end
            end
        end
        set(h,'string',s2);
        ndx=strcmp(ids,regexp(oldsel,'[A-Za-z0-9_+]*','match','once'));
        if any(ndx)
            set(h,'value',find(ndx,1))
        else
            aval=get(h,'value');
            if aval>length(s1)
                set(h,'value',length(s1));
            end
        end
        h=findobj(hfig,'tag','EditMaximum2');
        set(h,'Visible',vis);
        h=findobj(hfig,'tag','EditMinimum2');
        set(h,'Visible',vis);
        h=findobj(hfig,'tag','PopupPar2');
        set(h,'Visible',vis);
        h=findobj(hfig,'tag','EditMaximum');
        p=get(h,'position');
        p(3)=siz;
        set(h,'position',p);
        h=findobj(hfig,'tag','EditMinimum');
        p=get(h,'position');
        p(3)=siz;
        set(h,'position',p);
        h=findobj(hfig,'tag','PopupPars');
        p=get(h,'position');
        p(3)=siz;
        set(h,'position',p);
        selectedpoint(hObject)
        resize(h);
        par1changed(h);
        update_enable(hfig)
    end
    function update_enable(hfig)
        enab=iif(isempty(obj.curves),'off','on');
        set(findobj(hfig,'Tag','Plot_btn'),'Enable',enab);
        %   set(findobj(hfig,'Tag','Reset_btn'),'Enable',enab);
        curve.data.settings=obj.get('-nondefault');
        curve.freepars=obj.settings.derived.freepars;
        str1=get(findobj(hfig,'Tag','PopupEqlist'),'string');
        val1=get(findobj(hfig,'Tag','PopupEqlist'),'value');
        if ~any(strcmpi(str1,'None'))&&val1<=length(str1)
            str1{val1}=regexp(str1{val1},'[^\*]*','match','once');
            curve.frompoint=regexp(str1{val1},'[A-Za-z0-9_+]*','match','once');
            str=get(findobj(hfig,'Tag','curvepopup'),'string');
            aval=get(findobj(hfig,'Tag','curvepopup'),'value');
            curve.ctype=regexp(str{aval},'[A-Za-z0-9_+]*','match','once');
            foundcurve= any(getndx(obj,'curves','samecurve',curve));
        else
            foundcurve=false;
        end
        if foundcurve
            str1{val1}=['*' str1{val1}];
            set(findobj(hfig,'Tag','PopupEqlist'),'string',str1);
            if any(obj.getndx('points','npars',3))
                set(findobj(hfig,'Tag','codimpopup'),'string',{'1 parameter','2 parameters','3 parameters'});
            else
                set(findobj(hfig,'Tag','codimpopup'),'string',{'1 parameter','2 parameters'});
            end
            set(findobj(hfig,'Tag','expand_btn'),'enable','on')
            set(findobj(hfig,'Tag','Calculatebutton'),'string','Recalculate',...
                'TooltipString','Run a new continuation using the current settings; replaces existing curve')
        else
            set(findobj(hfig,'Tag','expand_btn'),'enable','off');
            set(findobj(hfig,'Tag','Calculatebutton'),'string','Calculate',...
                'TooltipString','Run continuation using the current settings')
        end
        set(findobj(hfig,'Tag','PopupEqlist'),'string',str1);
        set(findobj(hfig,'Tag','manageCurves_btn'),'Enable',enab);
        enabcodim2=iif(~any(obj.getndx('points','npars',2)),'off','on');
        set(findobj(hfig,'Tag','codimpopup'),'Enable',enabcodim2);
        %     set(findobj(hfig,'Tag','Reset_btn'),'Enable',enab);
    end
    function resize(hobj,~)
        %  left right top bottom
        hfig=getparentfig(hobj);
        h=findobj(hfig,'tag','codimpopup');
        aval=get(h,'value');
        if aval==1
            w1=197.25;
        else
            w1=90;
        end
        % 'PopupPars',[1 0 1 0],[129 244.5 90 18];...
        % 'EditMinimum',[1 0 1 0],[129 221.25 90 18];...
        % 'EditMaximum',[1 0 1 0],[129 198 90 18];...
        % 'MinText',[1 0 1 0],[8.25 219 75 18];...
        % 'MaxText',[1 0 1 0],[8.25 195 90.75 18];...
        % 'PopupPar2',[0 1 1 0],[235.5 243 90 18];...
        % 'EditMinimum2',[0 1 1 0],[235.5 220.5 90 18];...
        % 'EditMaximum2',[0 1 1 0],[235.5 198 90 18];...
        
        data={'settingsTable',[1 1 1 1],[9.75 5.25 313.5 114];...
            'codimpopup',[1 1 1 0],[129 313.5 90 18];...
            'enginepopup',[0 1 1 0],[235.5 313.5 90 18];...
            'HeadText',[1 0 1 0],[8.25 315 103.5 13.5];...
            'PopupEqText',[1 0 1 0],[8.25 291 97.5 18];...
            'PopupEqlist',[1 1 1 0],[129 291 197.25 18];...
            'initialpointdlg_btn',[0 1 1 0],[334.5 292.5 18.75 18];...
            'curvetext',[1 0 1 0],[8.25 267 97.5 18];...
            'curvepopup',[1 1 1 0],[129 267.75 197.25 18];...
            'manageCurves_btn',[0 1 1 0],[334.5 267.75 18.75 18];...
            'parsText',[1 0 1 0],[8.25 243 93.75 18];...
            'PopupPars',[1 1 1 0],[129 244.5 w1 18];...
            'EditMinimum',[1 1 1 0],[129 221.25 w1 18];...
            'EditMaximum',[1 1 1 0],[129 198 w1 18];...
            'MinText',[1 0 1 0],[8.25 219 75 18];...
            'MaxText',[1 0 1 0],[8.25 195 90.75 18];...
            'PopupPar2',[0 1 1 0],[235.5 243 90 18];...
            'EditMinimum2',[0 1 1 0],[235.5 220.5 90 18];...
            'EditMaximum2',[0 1 1 0],[235.5 198 90 18];...
            'RangeStateText',[1 0 1 0],[8.25 171 93.75 18];...
            'PopupvarRange',[1 1 1 0],[129 174 197.25 18];...
            'symstext',[1 0 1 0],[8.25 147 124.5 18];...
            'symscheck',[1 1 1 0],[129 150.75 197.25 18];...
            'enterjacbutton',[0 1  1 0],[334.5 152.25 18.75 18];...
            'OptionsCheck',[1 0 1 0],[10.5 119.25 176.25 21];...
            'editpropbutton',[0 1 1 0],[334.5 122.25 18.75 18];...
            'Plot_btn',[0 1 0 1 ],[371.25 145.5 71.25 18];...
            'Reset_btn',[0 1 0 1],[371.25 117.75 71.25 18];...
            'expand_btn',[0 1 0 1],[371.25 90 71.25 18];...
            'activepars_btn',[0 1 1 0],[334.5 243 18.75 18];...
            'Helpbutton',[0 1 0 1],[371.25 62.25 71.25 18];...
            'Closebutton',[0 1 0 1],[371.25 34.5 71.25 18];...
            'Calculatebutton',[0 1 0 1],[371.25 5.25 71.25 18]};
        i_resizedlg(hfig,data(:,1),data(:,2),data(:,3),[455.25  336]);
        i_resizedlg(hfig,'horizdistrib', {'codimpopup','enginepopup'});
        if aval==2
            %distribute settings of parameter 1 and 2
            i_resizedlg(hfig,'horizdistrib', {'PopupPars','PopupPar2'});
            i_resizedlg(hfig,'horizdistrib', {'EditMinimum','EditMinimum2'});
            res=i_resizedlg(hfig,'horizdistrib', {'EditMaximum','EditMaximum2'});
            h=findobj('tag','codimpopup');
            pos=get(h,'position');
            pos(3)=res(2);
            set(h,'position',pos);
        end
    end
    function ok=has_mupad
        %true if the symbolic toolbox is available
        ok=i_hastoolbox('symbolic')&&~g_grind.statevars.vector;
    end

    function selparok(hObj,~)
        hfig1=get(hObj,'parent');
        ud=get(hfig1, 'userdata');
        tab=findobj(hfig1,'tag','table');
        settingdata = get(tab, 'data');
        obj.settings.grind.activepars=[settingdata{:,4}];
        obj.settings.derived.freepars=find([settingdata{:,5}]);
        if ~isempty(obj.settings.derived.freepars)
            obj.settings.grind.par1=obj.settings.derived.allpars{obj.settings.derived.freepars(1)};
        end
        if length(obj.settings.derived.freepars)>1
            obj.settings.grind.par2=obj.settings.derived.allpars{obj.settings.derived.freepars(2)};
        end
        
        % if ud.dim>1
        h=findobj(ud.parent,'tag','PopupPar2');
        set(h,'string',obj.settings.derived.allpars(obj.settings.grind.activepars));
        if ud.dim>1
            ipar=all2active(obj.settings.derived.freepars(2));
            set(h,'value',ipar);
        end
        h=findobj(ud.parent,'tag','PopupPars');
        set(h,'string',obj.settings.derived.allpars(obj.settings.grind.activepars));
        ipar=all2active(obj.settings.derived.freepars(1));
        set(h,'value',ipar);
        par1changed(h)
        %    end
        %      set(hfig1, 'userdata',ud);
        uiresume;
    end
    function  selectpars(dim)
        % the user has clicked on '...' button to select active parameters
        descrips=transpose(par('-d'));
        vals=par('-vector');
        pars=transpose(obj.settings.derived.allpars);
        sel=obj.settings.grind.activepars(:);
        sel1=false(size(sel));
        sel1(obj.settings.derived.freepars(1:dim))=true;
        if numel(descrips)~=numel(pars)
            %for vector models descriptions not supported
            descrips=cell(size(pars));
        end
        
        settingdata=[pars,descrips,num2cell(vals),num2cell(sel),num2cell(sel1)];
        ud.dim=dim;
        ud.freepars=obj.settings.derived.freepars;
        ud.activepars=obj.settings.grind.activepars;
        ud.parent=hfig;
        hfig1 = figure('Color',[0.914 0.914 0.914], ...
            'MenuBar','none', ...
            'Name',sprintf('Select parameters (%s)',obj.settings.derived.engine), ...
            'NumberTitle','off', ...
            'PaperPosition',[18 180 576 432], ...
            'PaperUnits','points', ...
            'Position',[554 355 500 330], ...
            'Tag','Fig1', ...
            'ResizeFcn',@subresize,...
            'ToolBar','none',...
            'Userdata',ud,...
            'CreateFcn',@(h,evnt)movegui(h, 'center'));
        columnname =   {'Parameter','Description','value', 'Active', 'Free'};
        columneditable =  [false false false true true];
        columnformat={'char','char','char','logical','logical'};
        htab=uitable('parent',hfig1,'Units','normalized','Position',...
            [0 0.15 1 0.85], 'Data', settingdata, ...
            'ColumnName', columnname, ...
            'ColumnEditable', columneditable, ...
            'ColumnFormat', columnformat, ...
            'ColumnWidth', {70 250 60 40 40}, ...
            'TooltipString','Select active and free parameters',...
            'RowName',[],'tag','table',...
            'CellEditCallback',@celleditcallback2);
        
        uicontrol('Parent',hfig1, ...
            'Units','normalized', ...
            'Callback',@selparok, ...
            'ListboxTop',0, ...
            'Position',[0.28,0.01,0.2,0.1], ...
            'TooltipString','Save all changes and exit',...
            'String','OK', ...
            'Tag','OKbutton');
        % Define a context menu; it is not attached to anything
        hcmenu = uicontextmenu;
        % Define the context menu items and install their callbacks
        uimenu(hcmenu, 'Label', 'All parameters active', 'Callback', @checkall);
        uimenu(hcmenu, 'Label', 'No parameters active', 'Callback', @uncheckall);
        uimenu(hcmenu, 'Label', 'Toggle (vector) parameter', 'Callback', @togglepar);
        
        set(htab,'uicontextmenu',hcmenu);
        uicontrol('Parent',hfig1, ...
            'Units','normalized', ...
            'Callback','uiresume', ...
            'ListboxTop',0, ...
            'Position',[0.53,0.01,0.2,0.1], ...
            'TooltipString','Cancel without saving the changes',...
            'String','Cancel', ...
            'Tag','Cancelbutton');
        uiwait;
        if ishandle(hfig1)
            % ud = get(hfig, 'userdata');
            close(hfig1);
        end
    end
    function varrangechanged(hObj,~)
        v=get(hObj,'value');
        switch v
            case 1
                obj.settings.grind.stateranges=[NaN NaN];
            case 2
                obj.settings.grind.stateranges=[0 NaN];
            case 3
                staterangesdlg;
        end
    end
    function  staterangesdlg
        data=obj.settings.grind.stateranges;
        if size(data,1)==1&&obj.settings.derived.ndim>1
            %if all ranges are the same only one is stored
            data=repmat(data,obj.settings.derived.ndim,1);
        end
        data=num2cell(data);
        
        data=[obj.settings.derived.statevars,data];
        for i=1:size(data,1)
            for j=2:size(data,2)
                if isnan(data{i,j})
                    data{i,j}='';
                elseif isnumeric(data{i,j})
                    data{i,j}=num2str(data{i,j});
                end
                
            end
            
        end
        
        % 'bi_direct', 'cont', 'Boolean flag for bidirectional continuation (default: true)',settings.coco.cont.bi_direct;...
        
        hfig1 = figure('Color',[0.914 0.914 0.914], ...
            'MenuBar','none', ...
            'Name','Ranges for state variables', ...
            'NumberTitle','off', ...
            'PaperPosition',[18 180 576 432], ...
            'PaperUnits','points', ...
            'Position',[554 355 400 330], ...
            'Tag','Fig1', ...
            'ToolBar','none',...
            'CreateFcn',@(h,evnt)movegui(h, 'center'));
        
        columnname =   {'Name','Minimum (or empty)','Maximum (or empty)'};
        columneditable =  [false  true true];
        columnformat={'char','char','char'};
        uitable('parent',hfig1,'Units','normalized','Position',...
            [0 0.15 1 0.85], 'Data', data, ...
            'ColumnName', columnname, ...
            'ColumnEditable', columneditable, ...
            'ColumnFormat', columnformat, ...
            'TooltipString','Select the ranges for state variables (leave empty for no limit)',...
            'ColumnWidth', {70 130 130}, ...
            'RowName',[],'tag','table');
        
        uicontrol('Parent',hfig1, ...
            'Units','normalized', ...
            'ListboxTop',0, ...
            'Callback',@(h,ev)uiresume,...
            'Position',[0.28,0.01,0.2,0.1], ...
            'String','OK', ...
            'TooltipString','Save changes and exit',...
            'Tag','OKbutton');
        uiwait;
        if ishandle(hfig1)
            htab=findobj(hfig1,'tag','table');
            data= get(htab, 'data');
            for i=1:size(data,1)
                for j=2:size(data,2)
                    obj.settings.grind.stateranges(i,j-1)=str2double(data{i,j});
                end
            end
            aa= obj.settings.grind.stateranges;
            if (all(isnan(aa(:,1)))||all(aa(:,1)==aa(1,1)))&&(all(isnan(aa(:,2)))||all(aa(:,2)==aa(1,2)))
                obj.settings.grind.stateranges=aa(1,:);
            end
            close(hfig1);
        end
    end
    function subresize(hobj,~)
        hfig=getparentfig(hobj);
        data={'table',[1 1 1 1],[0 37.125 375 210.375];...
            'OKbutton',[0 1 0 1],[105 2.475 75 24.75];...
            'Cancelbutton',[0 1 0 1],[198.75 2.475 75 24.75]};
        i_resizedlg(hfig,data(:,1),data(:,2),data(:,3),[442.5 261.75 375 247.5]);
    end
    function celleditcallback2(hObject,callbackdata)
        %   callbackdata fields:
        %           Indices: [2 5]
        %     PreviousData: 0
        %         EditData: 1
        %          NewData: 1
        %            Error: []
        hfig=getparentfig(hObject);
        ud=get(hfig,'userdata');
        c = callbackdata.Indices(2);
        r = callbackdata.Indices(1);
        dat=get(hObject,'data');
        if c==5
            r = callbackdata.Indices(1);
            if callbackdata.EditData&&dat{r,4}
                %   dat(:,c)={false};
                dat{r,c}=true;
            else
                dat{r,c}=dat{r,4};
            end
            f=find(cell2num(dat(:,5)));
            if length(f)>ud.dim
                if f(1)==r
                    dat{f(2),c}=false;
                else
                    dat{f(1),c}=false;
                end
            end
            set(hObject,'data',dat);
        elseif c==4&&dat{r,5}&&~callbackdata.EditData
            sel=[dat{:,4}];
            sel(r)=true;
            ndx=find(sel);
            i=find(ndx==r);
            if ~isempty(ndx)
                if i==1
                    r2=ndx(i+1);
                else
                    r2=ndx(i-1);
                end
            end
            
            dat{r2,5}=true;
            dat{r,5}=false;
            set(hObject,'data',dat);
        end
    end
    function result=session_dlg
        data1=  {false ,'Reset all settings';false,'Clear curves';false,'Load session from file';false, 'Save Session to file';false, sprintf('Check for updates of %s',obj.settings.derived.engine)};
        
        h1 = figure(...
            'Units','characters',...
            'PaperUnits',get(0,'defaultfigurePaperUnits'),...
            'Color',[0.94 0.94 0.94],...
            'IntegerHandle','off',...
            'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
            'MenuBar','none',...
            'Name','Session of conteq',...
            'NumberTitle','off',...
            'PaperPosition',get(0,'defaultfigurePaperPosition'),...
            'PaperSize',get(0,'defaultfigurePaperSize'),...
            'PaperType',get(0,'defaultfigurePaperType'),...
            'Position',[103.8 46 65.6 15.5384615384615],...
            'Resize','off',...
            'HandleVisibility','callback',...
            'UserData',[],...
            'CreateFcn',@(h,evnt)movegui(h, 'center'),...
            'Tag','SessionDlg',...
            'Visible','on');
        
        uicontrol(...
            'Parent',h1,...
            'Units','characters',...
            'Callback',@(~,~)uiresume(h1),...
            'FontUnits','pixels',...
            'FontSize',10.6666666666667,...
            'Position',[13.6 1.46153846153846 13.8 1.69230769230769],...
            'TooltipString','Save changes and exit',...
            'String','Ok',...
            'Tag','OKbtn');
        
        uicontrol(...
            'Parent',h1,...
            'Units','characters',...
            'callback',@cancel_sessiondlg,...
            'FontUnits','pixels',...
            'FontSize',10.6666666666667,...
            'Position',[37.4 1.38 13.8 1.69],...
            'TooltipString','Exit without saving the new settings',...
            'String','Cancel',...
            'Tag','CancelBtn');
        uicontrol(...
            'Parent',h1,...
            'Units','characters',...
            'FontUnits','pixels',...
            'FontSize',10.6666666666667,...
            'Position',[4 12.92 10.4 1.077],...
            'String','Action:',...
            'Style','text',...
            'Tag','text1');
        
        uitable(...
            'Parent',h1,...
            'Units','characters',...
            'ColumnFormat',{  [] [] },...
            'ColumnEditable',[true false],...
            'ColumnName',[],...
            'ColumnWidth',{  'auto' 200 },...
            'Data',data1,...
            'Position',[5 4.15 57 8.77],...
            'RowName',[],...
            'UserData',[],...
            'TooltipString','Select one or more actions',...
            'Tag','SessionTable');
        uiwait;
        if ishandle(h1)
            result=get(findobj(h1,'Tag','SessionTable'),'data');
            close(h1);
        else
            result=data1;
        end
    end
    function cancel_sessiondlg(hObj,~)
        h1=getparentfig(hObj);
        htab=findobj(h1,'Tag','SessionTable');
        data1=get(htab,'data');
        for i=1:length(data1)
            data1{i,1}=false;
        end
        set(htab,'data',data1);
        uiresume;
    end

    function ndx1=all2active(ndx)
        ndx1=sum(obj.settings.grind.activepars(1:ndx));
    end
end
