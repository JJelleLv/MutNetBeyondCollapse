function res= i_optimparsdlg
global g_data g_grind;

hfig = figure(...
    'Units','characters',...
    'PaperUnits',get(0,'defaultfigurePaperUnits'),...
    'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'MenuBar','none',...
    'Name','Optimize parameters/initial conditions',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'PaperSize',get(0,'defaultfigurePaperSize'),...
    'PaperType',get(0,'defaultfigurePaperType'),...
    'Position',[103.8 33 117.8 28.4615384615385],...
    'Resize','off',...
    'UserData',[],...
    'CreateFcn',@(h,evnt)movegui(h, 'center'),...
    'Tag','optimparsdlg',...
    'Visible','on' );


%'Callback',@(hObject,eventdata)i_optimparsdlg('popupmenu1_Callback',hObject,eventdata,guidata(hObject)),...
optmethods={'Nelder-Mead simplex (direct search) method', 'Shuffled Complex Evolution (SCE-UA) Duan, et al. 1992'};
if ~isfield(g_data,'optmethod')
    g_data.optmethod=optmethods{1};
end

uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'BackgroundColor',[1 1 1],...
    'FontSize',10.6666666666667,...
    'Position',[21.8 25.6923076923077 68.2 1.84615384615385],...
    'String',optmethods,...
    'Style','popupmenu',...
    'Value',find(strcmp(g_data.optmethod,optmethods)),...
    'Tooltipstring','Select the method for optimization',...
    'Callback',@methodpopupchange,...
    'Tag','methodpopup');

uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'HorizontalAlignment','left',...
    'Position',[2.4 26.1538461538462 10.4 1.07692307692308],...
    'String','Method',...
    'Style','text',...
    'Tag','text1' );


uitable(...
    'Parent',hfig,...
    'Units','characters',...
    'ColumnFormat',{  [] [] [] [] [] },...
    'ColumnEditable',[true false true true true],...
    'ColumnName',{  'Select'; 'Variable'; 'Current value'; 'Minimum'; 'Maximum' },...
    'ColumnWidth',{  'auto' 'auto' 'auto' 'auto' 'auto' },...
    'Data',{  blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) },...
    'Position',[3 2.84615384615385 87 16.3076923076923],...
    'Tooltipstring',sprintf('Select parameters or state variables by checking boxes in "Select" column,\ninitial conditions of variables can be set by editing the "Current value"'),...
    'RowName',[],...
    'UserData',[],...
    'Tag','partable');
if ~isfield(g_data,'varlist')
    varlist='';
else
    varlist=strtrim(sprintf('%s ',g_data.varlist{:}));
end
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'BackgroundColor',[1 1 1],...
    'FontSize',10.6666666666667,...
    'HorizontalAlignment','left',...
    'Position',[21.6 22.7692307692308 68.4 1.76923076923077],...
    'String',varlist,...
    'Enable','off',...
    'Style','edit',...
    'Tooltipstring','List of variables for data',...
    'Tag','datavaredit');

uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'HorizontalAlignment','left',...
    'Position',[2.4 23.0769230769231 17.6 1.07692307692308],...
    'String','Data variables',...
    'Style','text',...
    'Tag','text2' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'HorizontalAlignment','left',...
    'Position',[2.4 19.4615384615385 49.8 1.61538461538462],...
    'String','Select parameters or initial conditions to optimize:',...
    'Style','text',...
    'Tag','text3' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'Position',[92.8 25.3846153846154 18.8 2.15384615384615],...
    'String','Options',...
    'Tooltipstring','Click here to set other options for optimizing',...
    'Callback',@optionsclick,...
    'Tag','pushbutton2' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'Position',[93 12.6153846153846 18.8 2.15384615384615],...
    'String','Help',...
    'Tooltipstring','Display help on optimpars',...
    'Callback','commands(''optimpars'')',...
    'Tag','pushbutton5' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'Position',[93 3.53846153846154 18.8 2.15384615384615],...
    'String','OK',...
    'Tooltipstring','Start optimizing',...
    'Callback',@optimizeclick,...
    'Tag','pushbutton6' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'Position',[93 8.07692307692308 18.8 2.15384615384615],...
    'String','Cancel',...
    'Tooltipstring','Cancel the optimization',...
    'Callback',@(h,ev)close(getparentfig(h)),...
    'Tag','pushbutton7' );
uicontrol(...
    'Parent',hfig,...
    'Units','characters',...
    'FontUnits','pixels',...
    'FontSize',10.6666666666667,...
    'Position',[92.8 22.3846153846154 18.8 2.15384615384615],...
    'String','Data',...
    'Tooltipstring','Select/edit the data used for optimpars',...
    'Callback',@dataclick,...
    'Tag','pushbutton8');

h=findobj(hfig,'Tag','methodpopup');
hasrange=get(h,'value')==2;
if ~g_grind.statevars.vector
    vars=[g_grind.pars'; g_grind.statevars.names'];
    s=sprintf('%s;',vars{:});
    values=evalin('base',sprintf('[%s];',s(1:end-1)));
    if isfield(g_data,'pars')
        selected=ismember(vars,g_data.pars);
    else
        selected=false(size(vars));
    end

else
    error('not yet implemented');
end
pardata=[num2cell(selected),vars,num2cell(values)];
ud.parmins=values*0.5;
ud.parmaxs=values*2;
if isfield(g_data,'parmins')&&numel(g_data.parmins)==numel(g_data.pars)
    ud.parmins(selected)=g_data.parmins;
    ud.parmaxs(selected)=g_data.parmaxs;
end

sel=true(1,5);
if hasrange
    pardata=[pardata,num2cell(ud.parmins),num2cell(ud.parmaxs)];
else
    sel(4:5)=false;
end

h=findobj(hfig,'Tag','partable');
set(h,'data',pardata);
ud.okpressed=false;
ud.edible=[true false true true true];
ud.colnames={  'Select'; 'Variable'; 'Current value'; 'Minimum'; 'Maximum' };
set(h,'userdata',ud);

set(h,   'ColumnEditable',ud.edible(sel));
set(h,  'ColumnName',ud.colnames(sel));
uiwait(hfig);
res=false;
if ishandle(hfig)
    h=findobj(hfig,'Tag','partable');
    ud=get(h,'userdata');
    res=ud.okpressed;
    close(hfig);
end


function methodpopupchange(hObject, ~, ~) 
hfig=getparentfig(hObject);
h=findobj(hfig,'Tag','methodpopup');
hasrange=get(h,'value')==2;
h=findobj(hfig,'Tag','partable');
pardata=get(h,'data');
ud=get(h,'userdata');
if size(pardata,2)==5
    ud.parmins=transpose([pardata{:,4}]);
    ud.parmaxs=transpose([pardata{:,5}]);
end

sel=true(1,5);
if hasrange
    pardata=[pardata,num2cell(ud.parmins),num2cell(ud.parmaxs)];
else
    sel(4:5)=false;
    pardata=pardata(:,sel);
end

set(h,'data',pardata);
set(h,'userdata',ud);
set(h,   'ColumnEditable',ud.edible(sel));
set(h,  'ColumnName',ud.colnames(sel));

function dataclick(hObject, ~, ~)
global g_data;
setdata;
if ~isempty(g_data)&&isfield(g_data,'varlist')
    h=findobj(get(hObject,'parent'),'tag','datavaredit');
    set(h, 'String',strtrim(sprintf('%s ',g_data.varlist{:})));
end

function optionsclick(hObject, ~, ~)
global g_data
hfig=getparentfig(hObject);
h=findobj(hfig, 'Tag','methodpopup');
c=get(h,'string');
optmethod=c{get(h,'value')};
if strcmp(optmethod,'Nelder-Mead simplex (direct search) method')
    prompt={'Termination tolerance on X (TolX)','Termination tolerance on the function value (TolFun)',...
        'Maximum number of function evaluations allowed (MaxFunEvals)','Maximum number of iterations allowed (MaxIter)',...
        'Penalty function (SS, normalized SS or user function)',...
        'Only positive pars? (1/0)','Reset each step? (1/0)'};
    answer = {g_data.options.TolX, g_data.options.TolFun, g_data.options.MaxFunEvals1, ...
        g_data.options.MaxIter1,'normalized SS', g_data.options.PosOnly,g_data.options.ResetEachStep};
    for i=1:length(answer)
        if isnumeric(answer{i})
            answer{i}=num2str(answer{i});
        end

    end

    answer = inputdlg(prompt, 'Change options', 1, answer);
    if ~isempty(answer)
        g_data.options.TolX = str2double(answer{1});
        g_data.options.TolFun = str2double(answer{2});
        g_data.options.MaxFunEvals1 = answer{3};
        g_data.options.MaxIter1 = answer{4};
        g_data.options.penaltyfun = answer{5};
        g_data.options.PosOnly = str2double(answer{6});
        g_data.options.ResetEachStep = str2double(answer{7});
    end

else
    prompt={'Maximum number of function evaluations','Convergence if normalized parameter space <',...
        'Maximum number of evolution loops before convergency', ...
        'The percentage change allowed in MaxIter loops before convergency', ...
        'Number of complexes (sub-populations)', ...
        'Penalty function (SS, normalized SS or user function)',...
        'Reset each step? (1/0)'};
    answer = {sstr(g_data.options2.MaxFunEvals), sstr(g_data.options2.TolX), sstr(g_data.options2.MaxIter), ...
        sstr(g_data.options2.TolFun), sstr(g_data.options2.MaxPCGIter), 'normalized SS',  ...
        sstr(g_data.options2.ResetEachStep)};
    answer = inputdlg(prompt, 'Change options', 1, answer);
    if ~isempty(answer)
        g_data.options2.MaxFunEvals = str2double(answer{1});
        g_data.options2.TolX = str2double(answer{2});
        g_data.options2.MaxIter = str2double(answer{3});
        g_data.options2.TolFun = str2double(answer{4});
        g_data.options2.MaxPCGIter = str2double(answer{5});
        g_data.options2.PosOnly = 0;
        g_data.options.penaltyfun = answer{6};
        g_data.options2.ResetEachStep = str2double(answer{7});
    end

end


function optimizeclick(hObject, ~, ~)
global g_data;
hfig=getparentfig(hObject);
h=findobj(hfig, 'Tag','methodpopup');
c=get(h,'string');
g_data.optmethod=c{get(h,'Value')};
h=findobj(hfig, 'Tag','partable');
data=get(h,'Data');
selected=transpose(find([data{:,1}]));
g_data.pars=transpose(data(selected,2));
%if values have been changed in the table, change the selected parameters
for i=1:length(g_data.pars)
    assignin('base',g_data.pars{i},data{selected(i),3});
end

if size(data,2)==5
    g_data.parmins=[data{selected,4}];
    g_data.parmaxs=[data{selected,5}];
end

if isempty(g_data.pars)
    if strcmp(questdlg('No parameters or initial values selected...', ...
            'optimpars', ...
            'Back', 'Continue', 'Back'),'Back')
        return;
    end

end

if ~isfield(g_data,'obs')||isempty(g_data.obs)
    if strcmp(questdlg('No data selected...', ...
            'optimpars', ...
            'Back', 'Continue', 'Back'),'Back')
        return;
    end

end

ud=get(h,'userdata');
ud.okpressed=true;
set(h,'userdata',ud);
uiresume(hfig);

function r = sstr(n)
if ischar(n)
    r = n;
else
    r = num2str(n);
end

